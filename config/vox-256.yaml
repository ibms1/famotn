# config_manager.py
import os
import yaml

DEFAULT_CONFIG = {
    "dataset_params": {
        "root_dir": "data/vox-cpu",
        "frame_shape": [256, 256, 3],
        "id_sampling": False,
        "augmentation_params": {
            "flip_param": {"horizontal_flip": True, "time_flip": True},
            "jitter_param": {"brightness": 0.1,
                           "contrast": 0.1,
                           "saturation": 0.1,
                           "hue": 0.1}
        }
    },
    "model_params": {
        "common_params": {
            "num_kp": 10,
            "num_channels": 3,
            "estimate_jacobian": True
        },
        "kp_detector_params": {
            "temperature": 0.1,
            "block_expansion": 32,
            "max_features": 1024,
            "scale_factor": 0.25,
            "num_blocks": 5
        },
        "generator_params": {
            "block_expansion": 64,
            "max_features": 512,
            "num_down_blocks": 2,
            "num_bottleneck_blocks": 6,
            "estimate_occlusion_map": True,
            "dense_motion_params": {
                "block_expansion": 64,
                "max_features": 1024,
                "num_blocks": 5,
                "scale_factor": 0.25
            }
        },
        "discriminator_params": {
            "scales": [1],
            "block_expansion": 32,
            "max_features": 512,
            "num_blocks": 4
        }
    },
    "train_params": {
        "num_epochs": 100,
        "num_repeats": 75,
        "epoch_milestones": [60, 90],
        "lr_generator": 2.0e-4,
        "lr_discriminator": 2.0e-4,
        "lr_kp_detector": 2.0e-4,
        "batch_size": 32,
        "scales": [1, 0.5, 0.25, 0.125],
        "checkpoint_freq": 50,
        "transform_params": {
            "sigma_affine": 0.05,
            "sigma_tps": 0.005,
            "points_tps": 5
        },
        "loss_weights": {
            "generator_gan": 0,
            "discriminator_gan": 1,
            "feature_matching": [10, 10, 10, 10],
            "perceptual": [10, 10, 10, 10, 10],
            "equivariance_value": 10,
            "equivariance_jacobian": 10
        }
    }
}

def ensure_config_exists(config_path="config/vox-256.yaml"):
    """التأكد من وجود ملف التكوين وإنشاؤه إذا لم يكن موجوداً"""
    if not os.path.exists(config_path):
        # إنشاء المجلد إذا لم يكن موجوداً
        os.makedirs(os.path.dirname(config_path), exist_ok=True)
        
        # كتابة التكوين الافتراضي
        with open(config_path, 'w', encoding='utf-8') as f:
            yaml.dump(DEFAULT_CONFIG, f, default_flow_style=False)
        return True
    return False

# تعديل الكود الرئيسي
def main():
    st.title("تحريك الصور باستخدام First Order Motion Model")
    
    # التأكد من وجود ملف التكوين
    config_path = "config/vox-256.yaml"
    if ensure_config_exists(config_path):
        st.success("تم إنشاء ملف التكوين بنجاح!")
    else:
        st.info("ملف التكوين موجود بالفعل")
    
    # بقية الكود كما هو...
    # [Previous main() code goes here]